<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术 | 郭润民的博客]]></title>
  <link href="http://grunmin.github.io/blog/categories/ji-zhu/atom.xml" rel="self"/>
  <link href="http://grunmin.github.io/"/>
  <updated>2014-12-26T17:09:16+08:00</updated>
  <id>http://grunmin.github.io/</id>
  <author>
    <name><![CDATA[Grunmin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的fedora应用列表]]></title>
    <link href="http://grunmin.github.io/blog/2014/11/13/wo-de-fedoraying-yong-lie-biao/"/>
    <updated>2014-11-13T23:11:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2014/11/13/wo-de-fedoraying-yong-lie-biao</id>
    <content type="html"><![CDATA[<p>用fedora也有接近两年时间了，现在将自己所用的应用都列出来供参考。</p>

<!--more-->


<h3>文档处理</h3>

<p>wps(金山公司推出的文档处理软件，类似软件还有永中office，libreoffer等)</p>

<p>evolution（系统自带，处理邮件，联系人，日历，任务等）</p>

<p>wiznote（为知笔记，适合做个人知识库）</p>

<p>haroopad（markdown编辑器）</p>

<p>sublime text (代码编辑器)</p>

<h3>即时通讯</h3>

<p>pidgin（系统自带)</p>

<p>empathy(系统自带)</p>

<h3>互联网</h3>

<p>chrome</p>

<p>firefox</p>

<p>bcloud（百度云客户端）</p>

<h3>shell extention</h3>

<p>drop down terminal</p>

<p>hide top bar</p>

<p>systemmonitor</p>

<p>taskbar</p>

<p>todo.txt</p>

<p>toggle terminal</p>

<h3>其他</h3>

<p>smplayer（小而全的播放器，带youtube资源播放器）</p>

<p>guake（个性化的shell终端）</p>

<p>fcitx+搜狗输入法（完美解决linux下中文输入问题）</p>

<p>vbox（虚拟机软件）</p>

<p>scrot（命令行形式的截图软件）</p>

<p>axel（多线程下载器）</p>

<p>以及安卓，ruby，lamp，c开发环境。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fedora 下安装金山快盘同步盘]]></title>
    <link href="http://grunmin.github.io/blog/2014/11/13/fedora-xia-an-zhuang-jin-shan-kuai-pan-tong-bu-pan/"/>
    <updated>2014-11-13T23:07:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2014/11/13/fedora-xia-an-zhuang-jin-shan-kuai-pan-tong-bu-pan</id>
    <content type="html"><![CDATA[<p>金山快盘推出了linux系统下的同步盘客户端，但是很遗憾没有红帽系的rpm安装包。尽管如此，我们可以通过一些操作在fedora下安装（mate桌面）（其他红帽系的没有尝试）</p>

<!--more-->


<ul>
<li>进入<a href="http://www.ubuntukylin.com/applications/showimg.php?lang=cn&amp;id=21">官网</a> 下载ubuntu版本的客户端（注意系统位数）</li>
<li>解压deb包，可看到<code>DEBIAN</code>,<code>etc</code>,<code>usr</code>,<code>opt</code>这几个文件夹（如只看到data.tar压缩包，则解压这个压缩包，可看到这几个文件夹）</li>
<li>进入解压后文件夹根目录，将<code>usr</code>,<code>opt</code>文件夹复制到系统根目录下
```

<h1>cp -r usr /</h1>

<h1>cp -r opt /</h1>

<p>```</p></li>
<li><p>安装库文件
```</p>

<h1>yum install libqxt</h1>

<h1>yum install boost-iostreams</h1>

<p>```
需要什么库文件可以通过在终端启动快盘时显示的错误信息排查。如果不是这两个的话也是正常情况。</p></li>
<li><p>创建链接
```</p>

<h1>ln /usr/bin/kuaipan4uk /home/yourhomedirectory/anywhereyoulike</h1>

<p>```
此时双击该链接即可启动快盘</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux服务器本地和百度云备份脚本小试]]></title>
    <link href="http://grunmin.github.io/blog/2014/11/13/linuxfu-wu-qi-ben-di-he-bai-du-yun-bei-fen-jiao-ben-xiao-shi/"/>
    <updated>2014-11-13T23:06:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2014/11/13/linuxfu-wu-qi-ben-di-he-bai-du-yun-bei-fen-jiao-ben-xiao-shi</id>
    <content type="html"><![CDATA[<h3>本地单文件上传脚本，命名uf</h3>

<p>这是在本机上做的测试，利用<code>bpcs_uploader</code>脚本实现，只是进行简单的封装，自动完善云端文件路径。</p>

<p>技术要点：使用<code>dirname</code>获取文件所在目录，使用<code>pwd</code>获取文件完整路径，并作为云端文件路径。</p>

<!--more-->


<p>```</p>

<h1>!/bin/bash</h1>

<p>cur_dir=$(cd &ldquo;$(dirname &rdquo;$1")&ldquo;; pwd)
name=$(basename &rdquo;$1")
/home/grm/bin/bpcs_uploader/bpcs_uploader.php upload $1 AWIN$cur_dir/$name
```</p>

<h3>本地文件夹上传脚本，命名ud</h3>

<p><code>bpcs_uploader</code>脚本只能实现单个文件上传，用此脚本可以实现目录批量上传。</p>

<p>技术要点：通过<code>find</code>命令输出目录下所有文件，用<code>xargs -t -n1</code>实现单个输出，从而可以遍历目录下所有文件，并作为参数逐次赋予脚本<code>uf</code>，通过不断调用脚本<code>uf</code>实现批量上传。
```</p>

<h1>!/bin/bash</h1>

<p>find $1 -name &lsquo;<em>.</em>&rsquo; |xargs -t -n1 /home/grm/bin/uf
```</p>

<h3>服务器数据库每日备份脚本，命名backupday.sh(改自鸟哥的linux私房菜)</h3>

<p>技术要点：基本都是常规操作，注意<code>find</code>命令<code>-mtime</code>参数的使用
```</p>

<h1>!/bin/bash</h1>

<h1>=========================================================</h1>

<h1>请输入，你想让备份数据放置到那个独立的目录去</h1>

<p>basedir=/backup/daily/</p>

<h1>=========================================================</h1>

<p>PATH=/bin:/usr/bin:/sbin:/usr/sbin; export PATH
export LANG=C
basefile1=$basedir/mysql.$(date +%Y-%m-%d).tar.bz2
basefile2=$basedir/cgi-bin.$(date +%Y-%m-%d).tar.bz2
[ ! -d &ldquo;$basedir&rdquo; ] &amp;&amp; mkdir $basedir</p>

<h1>1. MysQL (数据库目录在 /var/lib/mysql)</h1>

<p>cd /var/lib
  tar -jpc -f $basefile1 mysql</p>

<h1>2. 定期删除旧备份</h1>

<p>DAYS=30
find $basedir -name &ldquo;mysql*&rdquo; -type f -mtime +$DAYS -exec rm {} \;
```</p>

<h3>代码及其他配置每周备份脚本，命名为backupweek.sh</h3>

<p>```</p>

<h1>!/bin/bash</h1>

<h1>====================================================================</h1>

<h1>使用者参数输入位置：</h1>

<h1>basedir=你用来储存此脚本所预计备份的数据之目录(请独立文件系统)</h1>

<p>basedir=/backup/weekly</p>

<h1>====================================================================</h1>

<h1>底下请不要修改了！用默认值即可！</h1>

<p>PATH=/bin:/usr/bin:/sbin:/usr/sbin; export PATH
export LANG=C</p>

<p>D=$(date +&ldquo;%Y-%m-%d&rdquo;)</p>

<h1>配置要备份的服务的配置档，以及备份的目录</h1>

<p>postfixd=$basedir/postfix
vsftpd=$basedir/vsftp
sshd=$basedir/ssh
wwwd=$basedir/www
others=$basedir/others
userinfod=$basedir/userinfo</p>

<h1>判断目录是否存在，若不存在则予以创建。</h1>

<p>for dirs in $postfixd $vsftpd $sshd $wwwd $others $userinfod
do</p>

<pre><code>[ ! -d "$dirs" ] &amp;&amp; mkdir -p $dirs
</code></pre>

<p>done</p>

<h1>1. 将系统主要的服务之配置档分别备份下来，同时也备份 /etc 全部。</h1>

<p>cd /etc/</p>

<pre><code>tar -jpc -f $vsftpd/vsftpd.$D.tar.bz2 vsftpd
</code></pre>

<p>cd /etc/</p>

<pre><code>tar -jpc -f $sshd/sshd.$D.tar.bz2 sshd ssh
</code></pre>

<p>cd /etc/</p>

<pre><code>tar -jpc -f $wwwd/httpd.$D.tar.bz2 httpd
</code></pre>

<p>cd /var/www
  tar -jpc -f $wwwd/html.$D.tar.bz2    html
cd /
  tar -jpc -f $others/etc.$D.tar.bz2   etc</p>

<h1>2. 关於使用者参数方面</h1>

<p>cp -a /etc/{passwd,shadow,group}    $userinfod
cd /var/spool
  tar -jpc -f $userinfod/mail.$D.tar.bz2   mail
cd /
  tar -jpc -f $userinfod/home.$D.tar.bz2   home
cd /var/spool
  tar -jpc -f $userinfod/cron.$D.tar.bz2   cron at</p>

<h1>3. 定期删除旧备份</h1>

<p>DAYS=30
find $vsftpd -name &ldquo;vsftpd<em>&rdquo; -type f -mtime +$DAYS -exec rm {} \;
find $sshd -name &ldquo;sshd</em>&rdquo; -type f -mtime +$DAYS -exec rm {} \;
find $wwwd -name &ldquo;ht<em>&rdquo; -type f -mtime +$DAYS -exec rm {} \;
find $others -name &ldquo;etc</em>&rdquo; -type f -mtime +$DAYS -exec rm {} \;
find $userinfod -name &ldquo;cron<em>&rdquo; -type f -mtime +$DAYS -exec rm {} \;
find $userinfod -name &ldquo;home</em>&rdquo; -type f -mtime +$DAYS -exec rm {} \;
find $userinfod -name &ldquo;mail*&rdquo; -type f -mtime +$DAYS -exec rm {} \;
```</p>

<h3>自动上传脚本auto_upload_daily.sh</h3>

<p>其中upload.sh的代码与本地脚本<code>uf</code>相同。简言之，脚本<code>uf</code>是云备份的基础。
```</p>

<h1>!/bin/bash</h1>

<p>LOCAL_DATA=/backup/daily
MYSQL_BACKUP=mysql.$(date +&ldquo;%Y-%m-%d&rdquo;).tar.bz2</p>

<p>upload.sh $LOCAL_DATA/$MYSQL_BACKUP
```</p>

<h3>自动上传脚本auto_upload_weekly.sh</h3>

<p>```</p>

<h1>!/bin/bash</h1>

<p>LOCAL_DATA=/backup/weekly
D=$(date +&ldquo;%Y-%m-%d&rdquo;)</p>

<p>HTTP=www/httpd.$D.tar.bz2
HTML=www/html.$D.tar.bz2
ETC=others/etc.$D.tar.bz2
HOM=userinfo/home.$D.tar.bz2
MAIL=userinfo/mail.$D.tar.bz2
PASSWD=userinfo/passwd.$D.tar.bz2
SHADOW=userinfo/shadow.$D.tar.bz2
SSHD=ssh/sshd.$D.tar.bz2
VSFTPD=vsftpd/vsftpd.$D.tar.bz2
CRONA=userinfo/cron.$D.tar.bz2</p>

<p>upload.sh $LOCAL_DATA/$HTTP
upload.sh $LOCAL_DATA/$HTML
upload.sh $LOCAL_DATA/$ETC
upload.sh $LOCAL_DATA/$HOM
upload.sh $LOCAL_DATA/$MAIL
upload.sh $LOCAL_DATA/$PASSWD
upload.sh $LOCAL_DATA/$SHADOW
upload.sh $LOCAL_DATA/$CRONA
upload.sh $LOCAL_DATA/$SSHD
upload.sh $LOCAL_DATA/$VSFTPD
```</p>

<h3>最后，再启动定时任务</h3>

<p>为防止网络出现问题导致上传失败，重复了3次上传操作
```</p>

<h1>crontab -l</h1>

<p>01 1 * * * /bin/backupday.sh 2>>/backup/errors.log
20 1 * * 0 /bin/backupwk.sh 2>>/backup/errors.log
01 2 * * * /bin/auto_upload_daily.sh 2>>/backup/errors.log
01 4 * * * /bin/auto_upload_daily.sh 2>>/backup/errors.log
01 6 * * * /bin/auto_upload_daily.sh 2>>/backup/errors.log
20 2 * * 0 /bin/auto_upload_weekly.sh 2>>/backup/errors.log
20 4 * * 0 /bin/auto_upload_weekly.sh 2>>/backup/errors.log
20 6 * * 0 /bin/auto_upload_weekly.sh 2>>/backup/errors.log
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[双系统下修复grub2引导]]></title>
    <link href="http://grunmin.github.io/blog/2014/11/13/shuang-xi-tong-xia-xiu-fu-grub2yin-dao/"/>
    <updated>2014-11-13T22:28:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2014/11/13/shuang-xi-tong-xia-xiu-fu-grub2yin-dao</id>
    <content type="html"><![CDATA[<p>我的电脑上装有fedora和windows两个系统。一般装系统的时候windows先装而linxu后装，因为linux能够查找windows系统并为其提供启动引导，而windows不能。因此当需要重装windows的时候需要修复grub2引导。</p>

<!-- more -->


<p><strong>工具</strong>
fedora的livecd，即安装fedora时使用的安装U盘</p>

<h2>步骤</h2>

<h3>调整bios启动顺序，进入livecd</h3>

<h3>挂载硬盘</h3>

<ul>
<li>使用<code>fdisk -l</code>查找/boot分区所在硬盘，比如我的是/dev/sda8。（在此之前需要运行<code>su</code>命令）</li>
<li>挂载根分区<code>mount /dev/mapper/fedora-root /mnt</code></li>
<li>挂载/boot分区<code>mount /dev/sda8 /mnt/boot</code></li>
<li>挂载/dev分区<code>mount --bind /dev /mnt/dev</code></li>
</ul>


<h3>修改根目录</h3>

<p><code>chroot /mnt</code></p>

<h3>修复grub2</h3>

<ul>
<li><code>grub2-install /dev/sda</code></li>
<li><code>grub2-install /dev/sda --recheck</code></li>
</ul>


<h3>更新引导项</h3>

<p><code>grub2-mkconfig -o /boot/grub2/grub.cfg</code></p>

<p>若不执行更新引导项，则启动的时候会显示过去存在的操作系统（此时并不会显示新的操作系统）</p>

<p>进入fedora后，再次执行<code>grub2-mkconfig -o /boot/grub2/grub.cfg</code>，则引导项修复正常。</p>

<h3>更改默认引导项</h3>

<p>可以通过在<code>/boot/grub2/grub.cfg</code>添加<code>set default=X</code>（X为数字）来更改默认引导项。X从0开始，例如windows在引导菜单的第4行，则可以设置<code>set default=3</code></p>

<p>但是，这样的修改方法是不推荐的。因为每次执行<code>grub2-mkconfig -o /boot/grub2/grub.cfg</code>都会更新<code>grub.cfg</code>这个文件。正确的方法是执行<code>grub2-set-default &lt;标题或名称&gt;</code>。其中，&lt;标题或名称>用命令<code>grep menuentry /boot/grub2/grub.cfg</code>找到，即menuentry后引号内的内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技术改变生活(1)]]></title>
    <link href="http://grunmin.github.io/blog/2014/04/08/ji-zhu-gai-bian-sheng-huo-1/"/>
    <updated>2014-04-08T16:06:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2014/04/08/ji-zhu-gai-bian-sheng-huo-1</id>
    <content type="html"><![CDATA[<p>早晨躺在床上看书的时候，脑子忽的又想起那个问题：我垫钱帮人交四六级报名费，却找不出这位不缴费的同学是谁。心里突然老大不愿意——这可是我半个星期的伙食费呢！于是开始思考对策，务必要找出漏网之鱼。</p>

<!-- more -->


<p>我们报名四六级的流程是这样的。学生网上报名，教务员将报名学生的信息发给学委，学委按照名单收取报名费。汇总到我这里的时候，总是发现报名的人数和缴费的人数有偏差。因为名单里只有学生专业信息（信工和光信），而学委收取费用是按行政班（5个班）划分的。因此不知道是哪个班的同学没有交齐。</p>

<p>解决问题的关键就是找出缺漏的班级。毕竟让每班学委从几百个人名中挑出自己班的同学工作量太大，而且不能避免再次缺漏的情况。上一次我要求各班学委提供缴费名单给我，我一个一个核对。这一次没有人发给我，因此不能故技重施，得采用新的方法。</p>

<p>首先搜索excel有没有提供某些映射功能。这个功能具体是这样的：表A里学号和班级有对应关系，让表B里的学号根据表A的对应关系自动显示对应的班级。表A即学生信息表，表B即报名表。最后统计出现的各班级的次数，与各班缴费的人数对比得出结果。但是我没有找到可以实现的方法。</p>

<p>既然excel不能提供这样的功能，我只能通过数据库的方法。步骤是这样：将全级学生信息导入数据库，然后将报名表另存为csv文件，通过php的fgetcsv()函数获取报名表信息，递归查询输出各班出现的次数，最后汇总。
关键代码（用了CI框架）：
```
function count(){</p>

<pre><code>    $flag = array();   //班级标志，初始化
    for($i = 0;$i &lt; 5;$i++){ 
    $flag[$i] = 0;
    }
    $file = fopen(base_url('static/english.csv'),'r');
    while ($data = fgetcsv($file)) {  //每次读取CSV里面的一行内容   
        //print($data[0]);
        $this-&gt;db-&gt;where("num",$data[0]);
        $this-&gt;db-&gt;select("*");
        $query=$this-&gt;db-&gt;get("xuewei");
        $str = $query-&gt;result_array();
        if (!empty($str)) {

            $toflag = $str[0]['class'] - 1;
            $flag[$toflag]++；
        }
        else {
            print("Can not find this gay: ".$data[0]."&lt;br /&gt;");
        }
    }
    print_r($flag);
    fclose($file);
}
</code></pre>

<p>```
从输出就可以知道各班缴费的人数了。然后将这个班的报名同学信息通过类似的方法提取出来，与缴费名单比较，就可以知道是哪位同学没有缴费。</p>
]]></content>
  </entry>
  
</feed>
