<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | 郭润民的博客]]></title>
  <link href="http://grunmin.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://grunmin.github.io/"/>
  <updated>2014-03-16T21:14:00+08:00</updated>
  <id>http://grunmin.github.io/</id>
  <author>
    <name><![CDATA[Grunmin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Openshift 安装使用教程]]></title>
    <link href="http://grunmin.github.io/blog/2014/03/16/openshift-an-zhuang-shi-yong-jiao-cheng/"/>
    <updated>2014-03-16T21:09:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2014/03/16/openshift-an-zhuang-shi-yong-jiao-cheng</id>
    <content type="html"><![CDATA[<p>声明：配置环境是fedora 20，这里是<a href="https://access.redhat.com/site/documentation/en-US/OpenShift_Online/2.0/html/User_Guide/index.html">官方文档</a>，找文档是解决问题最有效的方式。</p>

<h3>介绍</h3>

<blockquote><p>OpenShift是红帽公司推出的一个云计算服务平台，开发人员可以用它来构建和发布web应用。Openshift广泛支持多种编程语言和框架，如Java，Ruby和PHP等。另外它还提供了多种集成开发工具如Eclipse integration，JBoss Developer Studio和 Jenkins等。OpenShift 基于一个开源生态系统为移动应用，数据库服务等，提供支持。
——来自百度百科</p></blockquote>

<p>简言之，就是一个面向开源开发人员开放的平台即服务(PaaS)。</p>

<p>使用openshift首先需要一个账户，注册十分简单，不在此赘述。
配置自己的openshift可以通过几种方式，比如web端，命令行。web端适合刚刚接触的新手，建议新用户多点点链接，熟悉一下大体的使用方法和功能。当准备好创建应用时即往下看。本文是介绍命令行下的配置，毕竟修改代码什么的都需要在本地修改后再提交。而openshift的客户端就是基于命令行的。</p>

<h3>安装</h3>

<h5>安装命令行客户端</h5>

<p><code>
sudo yum install rubygem-rhc -y
</code></p>

<h5>初始化设置</h5>

<p><code>
sudo rhc setup
</code>
此时需要输入帐号和密码，即为自己在openshift注册时的帐号。</p>

<p>令人费解的是使用我的本地账户运行<code>rhc</code>显示找不到命令，切换为root运行也是如此。只能使用<code>sudo rhc</code>的方式，后面运行<code>git push</code>也是如此，必须是<code>sudo git push</code>。如果你知道原因，烦请不吝赐教。</p>

<h5>使用gem更新rhc</h5>

<p><code>
sudo gem update rhc
</code>
然后看看自己的账户
<code>
sudo rhc account
</code>
在安装rhc的时候本地用户已和云端绑定，ssh公钥也导入了，因此之后的操作一般不需要再作验证。</p>

<h5>查看自己的app</h5>

<p><code>
sudo rhc apps
</code>
可以看到自己账户下有多少个app（免费账户最多3个），应用名，git仓库地址，主机地址，绑定的域名，以及模块，数据库版本，数据库用户和密码等等。比如我的wordpress（数据库账户和密码被我屏蔽）。
```</p>

<h2>blog @ <a href="http://blog-grunmin.rhcloud.com/">http://blog-grunmin.rhcloud.com/</a> (uuid: 5325520fe0b8cd3a830009ff)</h2>

<p>  Domain:          grunmin
  Created:         3:26 PM
  Gears:           1 (defaults to small)
  Git URL:         ssh://5325520fe0b8cd3a830009ff@blog-grunmin.rhcloud.com/~/git/blog.git/
  Initial Git URL: <a href="https://github.com/openshift/wordpress-example.git">https://github.com/openshift/wordpress-example.git</a>
  SSH:             5325520<a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#x3a;&#x66;&#x65;&#x30;&#98;&#56;&#99;&#100;&#51;&#97;&#56;&#x33;&#x30;&#48;&#48;&#x39;&#x66;&#x66;&#x40;&#x62;&#x6c;&#x6f;&#x67;&#45;&#x67;&#x72;&#117;&#110;&#x6d;&#105;&#110;&#46;&#x72;&#x68;&#99;&#108;&#x6f;&#117;&#100;&#46;&#99;&#111;&#x6d;">&#x66;&#x65;&#x30;&#98;&#56;&#99;&#100;&#x33;&#x61;&#x38;&#x33;&#x30;&#48;&#48;&#57;&#102;&#x66;&#64;&#98;&#108;&#111;&#x67;&#45;&#103;&#114;&#117;&#110;&#109;&#x69;&#110;&#x2e;&#114;&#x68;&#x63;&#x6c;&#x6f;&#x75;&#x64;&#x2e;&#x63;&#111;&#109;</a>
  Deployment:      auto (on git push)
  Aliases:         wp.guorunmin.cn</p>

<p>  mysql-5.1 (MySQL 5.1)</p>

<hr />

<pre><code>Gears:          Located with php-5.3
Connection URL: mysql://$OPENSHIFT_MYSQL_DB_HOST:$OPENSHIFT_MYSQL_DB_PORT/
Database Name:  blog
Password:       ********
Username:       ******
</code></pre>

<p>  php-5.3 (PHP 5.3)</p>

<hr />

<pre><code>Gears: Located with mysql-5.1
</code></pre>

<p>```</p>

<h3>创建应用</h3>

<h5>创建</h5>

<p>看别人的东西干过瘾，不如自己创建一个，创建的方法也很简单，只需一个命令
<code>
sudo rhc app create AppName
</code>
Openshift 支持Java，Ruby，Node.js，PHP，Perl和Python，在AppName 后面可以加其他参数，例如php应用是：
<code>
sudo rhc app create AppName php-5.4
</code>
有一种是diy模式，即自行搭建语言环境的，面对一台陌生的机器，我没有任何信心能完成这样的工作^_^。刚开始的时候，我找不到CI框架的环境（有ZF），所以选择新建空应用，以为我自己的代码可以在服务器上运行，想想还是比较天真哈哈哈
如果是安装环境了，改代码的之前需要将仓库克隆到本地。如果新建空应用，那么rhc会自动将仓库克隆下来。</p>

<p>更多参数可以参见<a href="https://access.redhat.com/site/documentation/en-US/OpenShift_Online/2.0/html/User_Guide/Creating_an_Application5.html">官方文档</a>，不用担心看不懂英文，我翻了一遍，文档大体都能看懂。</p>

<h5>添加mysql和phpmyadmin模块</h5>

<p>既然是php应用，mysql和phpmyadmin怎么能少呢！让我们添加一下
<code>
sudo rhc cartridge add mysql-5.1 -a AppName
sudo rhc cartridge add phpmyadmin -a AppName
</code>
此时新建的应用信息大概就是你看到的上面那个。建议保存一下有用的信息，比如phpmyadmin的地址，用户名和密码，尤其是使用web端创建的同学*_*</p>

<p><em>安装wordpress后还需登陆网站添加安装配置信息</em></p>

<p>如果要删除应用，执行
<code>
sudo rhc app delete AppName
</code></p>

<h3>开始码字</h3>

<p>如果安装的是wordpress这些成熟的应用，因为它提供了管理界面，大概不用去修改代码。如果是自己开发的应用呢？Openshift支持git的方式修改云端上的代码。大体流程应该是这样：
克隆代码到本地->进入应用目录->进入代码目录->修改代码->git add,commit,push->服务器上的应用关闭->一系列编译布置->应用重启->完成</p>

<p>克隆操作
<code>
sudo rhc git-clone AppName
</code>
或者知道仓库地址，像这样
<code>
sudo git clone ssh://53257e56e0b8cd671500019b@app-grunmin.rhcloud.com/~/git/app.git/
</code>
php应用根目录下默认有两个文件夹，.git和.openshift。（安装wordpress时候还有另外三个目录：libs,misc,php，但是我找不到wordpress的代码）.openshift目录的作用官网的说明挺详细，我只知道是存放git动作触发的脚本文件，没有深入研究。根目录下还有index.php文件，就是登陆AppName-AccountName.rhcloud.com时看到的页面。这样的设计应该很明朗了，我们直接将代码放在应用根目录下即可。或许你可以写个测试文件看看php的环境，比如"welcome.php"
```
&lt;?php</p>

<pre><code>     phpinfo();
</code></pre>

<p>?>
```</p>

<p>另外我们可以ssh进去主机看看里面的文件。如果想了解的话还是自己找找资料吧，比如<a href="http://www.dashashi.com/index.php/2013/01/1435">openshift用ssh登陆后的目录结构</a>。</p>

<h3>访问</h3>

<p>虽说是否被墙是判断一个服务好坏的标准，不过眼看着这么好的服务被墙还是挺让人窝火。因此我也希望我们能够好好利用openshift，不要见缝插针，浪费资源。</p>

<p>如果是博客，那么有一个自己的域名当然比较好。如果不是的话，为了避免被墙，建议也绑定一个，虽然不一定能起作用。绑定域名，也是一个命令搞定：
<code>
sudo rhc alias add AppName YourDomain
</code>
当然，你需要在域名提供商那里添加一个CNAME记录，指向你的openshift域名。
<em>因为缓存的原因，域名解析不会立刻生效。</em></p>

<p>或者使用https的方式访问。</p>

<p>其他跨栏的姿势很多，不赘述。</p>

<p>参考：
<a href="http://www.live-in.org/archives/1818.html">openshift使用方法介绍</a></p>

<p><a href="http://www.live-in.org/archives/1818.html">openshift用ssh登陆后的目录结构</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android 下用脚本备份文件到dropbox的实现]]></title>
    <link href="http://grunmin.github.io/blog/2014/03/15/android-xia-yong-jiao-ben-bei-fen-wen-jian-dao-dropboxde-shi-xian/"/>
    <updated>2014-03-15T23:28:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2014/03/15/android-xia-yong-jiao-ben-bei-fen-wen-jian-dao-dropboxde-shi-xian</id>
    <content type="html"><![CDATA[<p>前些日子寻找linux下上传文件到云的脚本，以实现远程服务器上资料的云端备份。</p>

<!-- more -->


<p>国内的网盘虽说正逐渐在开放API，但是到实现方便个人云存储应该还需一定的时间，百度云的pcs接口也关闭了（现在重新开放）。这方面国外的Dropbox做得不错，已经有一些相对成熟的应用。比如脚本<a href="https://github.com/andreafabrizi/Dropbox-Uploader">Dropbox-Uploader</a>。</p>

<blockquote><p>Dropbox Uploader is a BASH script which can be used to upload, download, delete, list files (and more!) from Dropbox, an online file sharing, synchronization and backup service.</p>

<p>It&rsquo;s written in BASH scripting language and only needs cURL.</p></blockquote>

<p>Dropbox Uploader 是一个bash脚本，提供上传，下载，移动网盘上的文件等功能。通过学习已经实现了远程服务器上的云端备份（2G空间已塞满……准备转投百度云）。</p>

<p>既然是bash脚本，那么怀着linux心的android系统应该也可以使用。虽然现在各种云app充斥眼球，但是相对而言它们都太庞大了。比如百度云app，安装后大小有20+M。我只需要一个能提供上传下载的app，而不是一个集社交，防盗为一体，还总是要后台运行的臃肿app。因此开始着手如何将Dropbox Uploader用在手机上。</p>

<p>我们知道，android下的shell是不完整的，默认是ash。因此我主要做的工作是弄出一个bash的环境，没有什么技术含量，纯粹是一时兴起。</p>

<p>那就开始吧。</p>

<p>1、手机提权</p>

<p>就是root了，关于root的教程网上都有。没有取得root权限，后面的操作都无法执行。对我来说，自己的手机不root就不像是自己的手机。</p>

<p>2、安装busybox，终端模拟器</p>

<p>可以在谷歌市场下载<a href="https://play.google.com/store/apps/details?id=stericson.busybox&amp;hl=zh_CN">busybox</a>和<a href="https://play.google.com/store/apps/details?id=jackpal.androidterm&amp;hl=zh_CN">终端模拟器</a>。busybox提供了bash下的一系列常用的命令。比系统自带的强。安装需要root权限，正常安装即可。终端模拟器用来输入命令，也可用<a href="https://play.google.com/store/apps/details?id=os.tools.scriptmanager">脚本管理器</a>。</p>

<p>3、下载bash，curl，dropbox_uploader.sh</p>

<p>下载<a href="http://pan.baidu.com/s/1i3mhTyd">bash</a>，<a href="http://pan.baidu.com/s/1lGkZ8">curl</a>，到/system/bin/目录下。在终端模拟器下输入<code>bash</code>应该能进入bash。dropbox_uploader.sh即为Dropbox Uploader的文件名，也放在/system/bin/目录下。</p>

<p>4、其他准备</p>

<p>首先修改Dropbox Uploader文件的第一行，将其sh改为/system/bin/bash，然后新建一个文件夹/tmp,<code>mkdir /tmp</code>。</p>

<p>5、创建dropbox应用</p>

<p>使用Dropbox Uploader前需要在Dropbox上创建应用，让该应用具有文件修改权限。具体如何实现可参考<a href="http://teddysun.com/178.html">Dropbox Uploader的使用教程</a>
Dropbox Uploader的数据传输是加密的，前面的那些设置并没有包含这些。(当时没有找到方法，现在也没有去折腾。因此在使用Dropbox Uploader时需加 <code>-k</code>参数，不检查ssl证书。)</p>

<p>6、使用</p>

<p>按照上面的方法设置后，应该就可以用Dropbox Uploader上传文件了。因为在手机上敲打命令不易，因此我们可以另外写个脚本，比如：
```</p>

<h1>!/system/bin/bash</h1>

<p>/system/bin/dropbox_uploader.sh -k -s upload $1
```
将脚本命名为u，打开终端模拟器，键入u filename即可将文件上传到dropbox。下载也是一样。</p>

<p><strong>后记</strong></p>

<p>这是我寒假在家没有电脑的消遣之举，现在看来这东西实在非常鸡肋，但是当时弄了一个晚上。终于弄成功时那种喜悦难以言表，因此打算回校写篇教程。本文言尽于此，后续不再完善存在的问题。因为我已经找到了完美的替代品，<a href="https://play.google.com/store/apps/details?id=com.damiapp.softdatacable&amp;hl=zh_CN">软件数据线</a>。</p>

<p>参考引用：
<a href="http://teddysun.com/178.html">备份利器Dropbox Uploader</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fedora 下调节外放音量和屏幕亮度]]></title>
    <link href="http://grunmin.github.io/blog/2014/03/13/fedora-xia-diao-jie-wai-fang-yin-liang-he-ping-mu-liang-du/"/>
    <updated>2014-03-13T00:43:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2014/03/13/fedora-xia-diao-jie-wai-fang-yin-liang-he-ping-mu-liang-du</id>
    <content type="html"><![CDATA[<h3>声音</h3>

<p>fedora系统下笔记本外放功能可能有受到一些限制。接耳机的时候声音是正常的，但是拔下耳机后电脑并不能外放声音。网上搜到的方法是：</p>

<!-- more -->


<p>终端运行alsamixer->按F6键，选中对应硬件，应该会出现这样的画面<img src="https://lh4.googleusercontent.com/-Pj4Qb92Mz3M/UyCOC4GBLFI/AAAAAAAAAJ0/IZSLgP3Xxqs/w614-h346-no/2014-03-13-002941_614x346_scrot.png" alt="" />，调高第三条的音量即可实现外放。</p>

<h3>显示</h3>

<p>1、可用命令行<code>xgamma -gamma X</code>暂时调节笔记本的屏幕亮度,X的值在1以下。</p>

<p>2、<code>/sys/class/backlight/intel_backlight/brightness</code>是调节屏幕亮度的，文件中的数字即代表亮度。
用vim编辑器改是不可以的，因此用重定向的方法：
```</p>

<h1>echo 100 > /sys/class/backlight/intel_backlight/brightness</h1>

<p>```
数值大概在100到200之间（我的默认是187,后改为100）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apache服务器个人主页的设置]]></title>
    <link href="http://grunmin.github.io/blog/2014/01/02/apachefu-wu-qi-ge-ren-zhu-ye-de-she-zhi/"/>
    <updated>2014-01-02T16:16:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2014/01/02/apachefu-wu-qi-ge-ren-zhu-ye-de-she-zhi</id>
    <content type="html"><![CDATA[<ul>
<li>查看apache版本
<code>
httpd -v
</code>
我的版本是2.4.6，个人主页相关的配置文件在<br/>
<code>/etc/httpd/conf.modules.d/00-base.conf</code><br/>
和
<code>etc/httpd/conf.d/userdir.conf</code></li>
</ul>


<!--more-->


<ul>
<li><p>查看<code>/etc/httpd/conf.modules.d/00-base.conf</code>，必须有<code>userdir_module</code>模块，如：
<code>
$ cat /etc/httpd/conf.modules.d/00-base.conf | grep userdir
LoadModule userdir_module modules/mod_userdir.so
</code></p></li>
<li><p>进入<code>/etc/httpd/conf.d/userdir.conf</code>设置，将第17行的<code>UserDir disabled</code>加上注释并取消24行<code>UserDir public</code>的注释(可以更改UserDir后面文件夹的名字，比如<code>UserDir www</code>)</p></li>
<li><p>进入个人家目录，创建一个文件夹www和测试页面
<code>
mkdir ~/www
cd ~/www
echo "Test home dir" &gt;&gt; index.html
</code></p></li>
<li>重启服务器，用浏览器打开<code>http://localhost/~username</code>，应该会出现403页面。
<code>
client denied by server configuration
</code></li>
</ul>


<p>将selinux关闭，查看是否可以访问。</p>

<ul>
<li>如果不能访问，添加下面的代码到<code>/etc/httpd/conf/httpd.conf</code>文件中</li>
</ul>


<p>```
 #将name和username按情况替换掉
<Directory "/home/username/www"></p>

<pre><code>AllowOverride None
Options Indexes FollowSymLinks
Require all granted
</code></pre>

<p></Directory>
```</p>

<p>这里要注意的是，apache2.4版本已经取消了
```</p>

<pre><code>Order Deny,Allow
Allow from All
</code></pre>

<p><code>
的使用，而采用
</code></p>

<pre><code>Require all granted
</code></pre>

<p>```
来设置对目录的访问。</p>

<ul>
<li>设置别名
<code>
Alias /name/ "/home/usename/www/"
</code>
到此个人目录可以使用，将代码放到~/www目录下吧^_^。</li>
</ul>


<blockquote><p>如果服务器总是显示403的话，检查以下你的家目录是否具有执行权限，修改为755即可。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RHCE note 9]]></title>
    <link href="http://grunmin.github.io/blog/2013/11/03/rhce-note-9/"/>
    <updated>2013-11-03T23:20:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2013/11/03/rhce-note-9</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>unit 2</h2>

<h3>配置sudoers</h3>

<p>文件/etc/sudoers是只读文件，保存时需加！强制保存.<br/>
实例：
<code>
[root@desktop31 ~]# ll /etc/sudoers
-r--r-----. 1 root root 4002 Mar  2  2012 /etc/sudoers
</code></p>

<p>vi sudoers</p>

<ol>
<li><p>sudoers语法规则
<code>
user1   machine=(user2) command
</code><br/>
实例：
<code>
[root@desktop31 ~]# cat /etc/sudoers | grep -v ^#
root    ALL=(ALL)   ALL
</code>
说明:root能在所有机器上以所有用户的身份执行任何命令。</p></li>
<li><p>授予组成员访问任何命令的权限
<code>
%groupname  ALL=    ALL
</code>
实例：
<code>
[root@desktop31 ~]# cat /etc/sudoers | grep %wheel
%wheel  ALL=(ALL)   ALLj
</code>
说明：wheel组能在所有机器上以所有用户身份执行任何命令。</p></li>
<li><p>无需提供密码的设置
<code>
user    machine=(user2) NOPASSWD: ALL
</code>
实例：
<code>
user1   ALL=(root)      NOPASSWD: ALL
</code></p></li>
<li><p>授予多名用户具有sudo权限
<code>
User_Alias  username = user1, user2, user3
username    machine=(user)  ALL
</code>
实例：
<code>
User_Alias ADMINS = user01, user001
ADMIN   ALL=(ALL)       NOPASSWD: ALL
</code></p></li>
<li><p>设置用户对特定命令列表具有sudo权限
<code>
Cmnd_Alias type = command, command
username    ALL=(ALL)   type
</code>
实例：
<code>
Cmnd_Alias STORAGE = /sbin/fdisk, /sbin/sfdisk, /sbin/parted, /sbin/partprobe, /bin/mount, /bin/umount
ADMINS  ALL=(ALL)       NOPASSWD: STORAGE
</code></p></li>
</ol>


<h3>Kerberos配置</h3>

<h4>安装</h4>

<p><code>
yum groupinstall -y directory-client
yum install -y openldap-clients
yum install -y krb5-workstation
</code></p>

<h4>配置</h4>

<p><code>
authconfig --enableldap --ldapserver=instructor.example.com --enableldaptls --ldaploadcacert=ftp://instructor.example.com/pub/example-ca.crt --ldapbasedn="dc=example,dc=com" --disableldapauth --enablekrb5 --krb5kdc=instructor.example.com --krb5adminserver=instructor.example.com --krb5realm=EXAMPLE.COM --enablesssd --enablesssdauth --update
</code>
<code>
--enablceldaptls 开启tls
--ldaploadcacert derberos证书下载目录
--ldapbasedn 基准dn
--disableldapauth 禁止ldap认证
--krb5realm 域名
--enablesssd --enablesssdauth 开启sssd认证
</code></p>

<h4>测试配置：</h4>

<p><code>
getent passwd ldapuserX
ssh ldapuserX@serverX
</code>
实例：
<code>
[root@demo cacerts]# getent passwd ldapuser1
ldapuser1:*:1701:1701:LDAP Test User 1:/home/guests/ldapuser1:/bin/bash
[root@demo cacerts]# ssh ldapuser1@serverX
ldapuser1@serverX's password: kerberos
</code></p>

<h2>unit 3</h2>

<h3>Bash 编程</h3>

<ul>
<li><p>包含bash命令的文件第一行应为：
#!/bin/bash</p></li>
<li><p>查看环境变量：<br/>
<code>echo $PATH</code><br/>
<code>set</code><br/>
<code>env</code><br/>
实例：
<code>
[root@desktop31 ~]# echo $PATH
/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin:/root/bin
</code></p></li>
<li><p>变量赋值,使用
str=value
$str 或者 ${str}</p></li>
<li><p>添加目录到环境变量：<br/>
<code>PATH=$PATH:path</code><br/>
实例：<br/>
<code>PATH=$PATH:/root</code></p></li>
<li><p>创建全局变量：<br/>
<code>export $NAME</code></p></li>
<li><p>命令替换<br/>
<code>$( shell command)</code><br/>
`shell command`<br/>
实例1：
<code>
touch datafile.$(id -un)
[root@desktop31 ~]# ls | grep datafile
datafile.root
</code>
实例2：
<code>
[root@desktop31 ~]# echo $TODAY
[root@desktop31 ~]# TODAY=`date +%Y-%m-%d`
[root@desktop31 ~]# echo $TODAY
2013-10-26
</code></p></li>
<li><p>弱引用，强引用和转义</p></li>
<li><p>bash编程实例：
```
添加用户</p>

<h1>!/bin/bash</h1>

if grep &ldquo;^$1:&rdquo; /etc/passwd ; then
  echo &ldquo;$1 is exist&rdquo;
else
  useradd $1;
  echo redhat |passwd &mdash;stdin $1;
fi
<code>  
</code>
查看网络主机

<h1>!/bin/bash</h1>

read -p &ldquo;Please input a ip addr:&rdquo; IP
ping -c2 $IP > /dev/null 2>&amp;1
if [ $? -eq 0 ];then
  echo &ldquo;$IP is up&hellip;&rdquo;
else
  echo &ldquo;$IP is down&hellip;&rdquo;
fi
<code>
</code>
无题……

<h1>!/bin/bash</h1>

read -p &ldquo;Please choice y/n&rdquo; YN
if [ $YN == y -o $YN == Y  -o $YN == &lsquo;yes&rsquo; ]; then
  echo &ldquo;Continue&hellip;&rdquo;
elif [ $YN == n -o $YN == N -o $YN == &lsquo;no&rsquo; ]; then
  exit 1
else
  echo &ldquo;other&rdquo;
fi
<code>
</code>
检查服务运行状态

<h1>!/bin/bash</h1>

read -p &ldquo;Plese input a service name:&rdquo; SN
SERVICE=$(netstat -anutlp |grep $SN)
if test -n &ldquo;$SERVICE&rdquo; ; then
  echo &ldquo;$SN is running&hellip;&rdquo;
else
  echo &ldquo;$SN is down&hellip;&rdquo;
fi
<code>
</code>
添加用户

<h1>!/bin/bash</h1>

for Name in usera userb userc a b c;
do
      if grep &ldquo;^$Name:&rdquo; /etc/passwd > /dev/null 2>&1; then
              echo &ldquo;User exist!&rdquo;;
      else
              useradd $Name;
              echo &ldquo;Add user $Name succeed!&rdquo;;
              echo &ldquo;redhat&rdquo; | passwd &mdash;stdin $Name > /dev/null 2>&1;
      fi
done
<code>
</code>
删除用户

<h1>!/bin/bash</h1>

<p>for Name in usera userb userc a b c;
do
      if grep &ldquo;^$Name:&rdquo; /etc/passwd > /dev/null 2>&amp;1 ; then
              userdel $Name;
              rm -rf /home/$Name;
              rm -rf /var/mail/$Name;
              echo &ldquo;user $Name delete succeed!&rdquo;;
      fi
done
```</p></li>
<li><p>比较文件内容diff<br/>
diff -Naur file1 file2 > patchfile  可以制作补丁文件</p></li>
<li><p>补丁命令patch
实例：
```</p>

<h1>patch issue patchfile</h1>

patching file issue

<h1>patch -b &lt; patch file</h1>

<p>patching file hosts
patching file network
```</p></li>
<li><p>过滤 grep
几个需要记住的参数：<br/>
-i  不区分大小写<br/>
-v 返回不包含特定字符的行</p></li>
<li><p>剪切cut<br/>
-f 指定第几个字段<br/>
-d 分隔符<br/>
实例：
<code>
cut -f3 -d: /etc/hosts //取出hosts文件中以:为分隔符的第3个字段
[root@demo ~]# ip addr |grep "inet " |cut -d" " -f6 |cut -d/ -f1
127.0.0.1
192.168.0.250
</code></p></li>
<li><p>tail 和 head<br/>
tail显示文件末尾10行（默认）<br/>
head显示文件开头10行（默认）<br/>
均可-n 参数后面接数字更改输出行数<br/>
tail -f可以持续显示文件的更新，例如<br/>
tail -f /var/log/messages<br/>
系统管理员常用</p></li>
<li><p>wc显示文件信息<br/>
-l 行数<br/>
-w 字数<br/>
-c 字节数
-m 字符数</p></li>
<li><p>排序sort</p></li>
<li><p>取唯一uniq</p></li>
</ul>


<h3>默认用户属性</h3>

<p>在/etc/login.defs及/etc/default/useradd中定义<br/>
chage命令可以调整属性</p>

<h2>unit 4</h2>

<p>gpg的使用<br/>
  + 流程：<br/>
  由user1产生密钥对，公钥导出给需要向user1传送文件的主机user2。<br/>
  gpg &mdash;gen-key <br/>
  gpg -K 查看私钥<br/>
  gpg -k 查看公钥<br/>
  gpg &mdash;export &mdash;armor key-id -o > file.key<br/>
  user2导入公钥加密文件，传送给user1。<br/>
  gpg &mdash;import file.key<br/>
  gpg -e -armor -r key-id file<br/>
  user1运用私钥解密文件，用私钥前需输入密码。<br/>
  gpg -d file > file_without_encrypt</p>
]]></content>
  </entry>
  
</feed>
