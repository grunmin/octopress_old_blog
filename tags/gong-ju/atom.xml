<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: 工具 | 郭润民的博客]]></title>
  <link href="http://grunmin.github.io/tags/gong-ju/atom.xml" rel="self"/>
  <link href="http://grunmin.github.io/"/>
  <updated>2014-11-14T09:40:38+08:00</updated>
  <id>http://grunmin.github.io/</id>
  <author>
    <name><![CDATA[Grunmin]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Openshift 安装使用教程]]></title>
    <link href="http://grunmin.github.io/blog/2014/03/16/openshift-an-zhuang-shi-yong-jiao-cheng/"/>
    <updated>2014-03-16T21:09:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2014/03/16/openshift-an-zhuang-shi-yong-jiao-cheng</id>
    <content type="html"><![CDATA[<p>声明：配置环境是fedora 20，这里是<a href="https://access.redhat.com/site/documentation/en-US/OpenShift_Online/2.0/html/User_Guide/index.html">官方文档</a>，找文档是解决问题最有效的方式。</p>

<!-- more -->


<h3>介绍</h3>

<blockquote><p>OpenShift是红帽公司推出的一个云计算服务平台，开发人员可以用它来构建和发布web应用。Openshift广泛支持多种编程语言和框架，如Java，Ruby和PHP等。另外它还提供了多种集成开发工具如Eclipse integration，JBoss Developer Studio和 Jenkins等。OpenShift 基于一个开源生态系统为移动应用，数据库服务等，提供支持。
——来自百度百科</p></blockquote>

<p>简言之，就是一个面向开源开发人员开放的平台即服务(PaaS)。</p>

<p>使用openshift首先需要一个账户，注册十分简单，不在此赘述。
配置自己的openshift可以通过几种方式，比如web端，命令行。web端适合刚刚接触的新手，建议新用户多点点链接，熟悉一下大体的使用方法和功能。当准备好创建应用时即往下看。本文是介绍命令行下的配置，毕竟修改代码什么的都需要在本地修改后再提交。而openshift的客户端就是基于命令行的。</p>

<h3>安装</h3>

<h5>安装命令行客户端</h5>

<p><code>
sudo yum install rubygem-rhc -y
</code></p>

<h5>初始化设置</h5>

<p><code>
sudo rhc setup
</code>
此时需要输入帐号和密码，即为自己在openshift注册时的帐号。</p>

<p>令人费解的是使用我的本地账户运行<code>rhc</code>显示找不到命令，切换为root运行也是如此。只能使用<code>sudo rhc</code>的方式，后面运行<code>git push</code>也是如此，必须是<code>sudo git push</code>。如果你知道原因，烦请不吝赐教。</p>

<h5>使用gem更新rhc</h5>

<p><code>
sudo gem update rhc
</code>
然后看看自己的账户
<code>
sudo rhc account
</code>
在安装rhc的时候本地用户已和云端绑定，ssh公钥也导入了，因此之后的操作一般不需要再作验证。</p>

<h5>查看自己的app</h5>

<p><code>
sudo rhc apps
</code>
可以看到自己账户下有多少个app（免费账户最多3个），应用名，git仓库地址，主机地址，绑定的域名，以及模块，数据库版本，数据库用户和密码等等。比如我的wordpress（数据库账户和密码被我屏蔽）。
```</p>

<h2>blog @ <a href="http://blog-grunmin.rhcloud.com/">http://blog-grunmin.rhcloud.com/</a> (uuid: 5325520fe0b8cd3a830009ff)</h2>

<p>  Domain:          grunmin
  Created:         3:26 PM
  Gears:           1 (defaults to small)
  Git URL:         ssh://5325520fe0b8cd3a830009ff@blog-grunmin.rhcloud.com/~/git/blog.git/
  Initial Git URL: <a href="https://github.com/openshift/wordpress-example.git">https://github.com/openshift/wordpress-example.git</a>
  SSH:             5325520<a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x66;&#101;&#x30;&#98;&#x38;&#x63;&#100;&#x33;&#x61;&#56;&#x33;&#x30;&#48;&#x30;&#x39;&#x66;&#x66;&#x40;&#98;&#x6c;&#111;&#103;&#45;&#x67;&#x72;&#x75;&#x6e;&#109;&#105;&#110;&#x2e;&#x72;&#104;&#99;&#x6c;&#x6f;&#117;&#x64;&#x2e;&#x63;&#x6f;&#109;">&#102;&#x65;&#x30;&#x62;&#56;&#x63;&#100;&#51;&#97;&#x38;&#x33;&#x30;&#48;&#48;&#57;&#102;&#102;&#64;&#98;&#x6c;&#x6f;&#x67;&#45;&#103;&#114;&#117;&#x6e;&#x6d;&#x69;&#x6e;&#46;&#x72;&#104;&#x63;&#108;&#x6f;&#117;&#x64;&#x2e;&#x63;&#111;&#109;</a>
  Deployment:      auto (on git push)
  Aliases:         wp.guorunmin.cn</p>

<p>  mysql-5.1 (MySQL 5.1)</p>

<hr />

<pre><code>Gears:          Located with php-5.3
Connection URL: mysql://$OPENSHIFT_MYSQL_DB_HOST:$OPENSHIFT_MYSQL_DB_PORT/
Database Name:  blog
Password:       ********
Username:       ******
</code></pre>

<p>  php-5.3 (PHP 5.3)</p>

<hr />

<pre><code>Gears: Located with mysql-5.1
</code></pre>

<p>```</p>

<h3>创建应用</h3>

<h5>创建</h5>

<p>看别人的东西干过瘾，不如自己创建一个，创建的方法也很简单，只需一个命令
<code>
sudo rhc app create AppName
</code>
Openshift 支持Java，Ruby，Node.js，PHP，Perl和Python，在AppName 后面可以加其他参数，例如php应用是：
<code>
sudo rhc app create AppName php-5.4
</code>
有一种是diy模式，即自行搭建语言环境的，面对一台陌生的机器，我没有任何信心能完成这样的工作^_^。刚开始的时候，我找不到CI框架的环境（有ZF），所以选择新建空应用，以为我自己的代码可以在服务器上运行，想想还是比较天真哈哈哈
如果是安装环境了，改代码的之前需要将仓库克隆到本地。如果新建空应用，那么rhc会自动将仓库克隆下来。</p>

<p>更多参数可以参见<a href="https://access.redhat.com/site/documentation/en-US/OpenShift_Online/2.0/html/User_Guide/Creating_an_Application5.html">官方文档</a>，不用担心看不懂英文，我翻了一遍，文档大体都能看懂。</p>

<h5>添加mysql和phpmyadmin模块</h5>

<p>既然是php应用，mysql和phpmyadmin怎么能少呢！让我们添加一下
<code>
sudo rhc cartridge add mysql-5.1 -a AppName
sudo rhc cartridge add phpmyadmin -a AppName
</code>
此时新建的应用信息大概就是你看到的上面那个。建议保存一下有用的信息，比如phpmyadmin的地址，用户名和密码，尤其是使用web端创建的同学*_*</p>

<p><em>安装wordpress后还需登陆网站添加安装配置信息</em></p>

<p>如果要删除应用，执行
<code>
sudo rhc app delete AppName
</code></p>

<h3>开始码字</h3>

<p>如果安装的是wordpress这些成熟的应用，因为它提供了管理界面，大概不用去修改代码。如果是自己开发的应用呢？Openshift支持git的方式修改云端上的代码。大体流程应该是这样：
克隆代码到本地->进入应用目录->进入代码目录->修改代码->git add,commit,push->服务器上的应用关闭->一系列编译布置->应用重启->完成</p>

<p>克隆操作
<code>
sudo rhc git-clone AppName
</code>
或者知道仓库地址，像这样
<code>
sudo git clone ssh://53257e56e0b8cd671500019b@app-grunmin.rhcloud.com/~/git/app.git/
</code>
php应用根目录下默认有两个文件夹，.git和.openshift。（安装wordpress时候还有另外三个目录：libs,misc,php，但是我找不到wordpress的代码）.openshift目录的作用官网的说明挺详细，我只知道是存放git动作触发的脚本文件，没有深入研究。根目录下还有index.php文件，就是登陆AppName-AccountName.rhcloud.com时看到的页面。这样的设计应该很明朗了，我们直接将代码放在应用根目录下即可。或许你可以写个测试文件看看php的环境，比如"welcome.php"
```
&lt;?php</p>

<pre><code>     phpinfo();
</code></pre>

<p>?>
```</p>

<p>另外我们可以ssh进去主机看看里面的文件。如果想了解的话还是自己找找资料吧，比如<a href="http://www.dashashi.com/index.php/2013/01/1435">openshift用ssh登陆后的目录结构</a>。</p>

<h3>访问</h3>

<p>虽说是否被墙是判断一个服务好坏的标准，不过眼看着这么好的服务被墙还是挺让人窝火。因此我也希望我们能够好好利用openshift，不要见缝插针，浪费资源。</p>

<p>如果是博客，那么有一个自己的域名当然比较好。如果不是的话，为了避免被墙，建议也绑定一个，虽然不一定能起作用。绑定域名，也是一个命令搞定：
<code>
sudo rhc alias add AppName YourDomain
</code>
当然，你需要在域名提供商那里添加一个CNAME记录，指向你的openshift域名。
<em>因为缓存的原因，域名解析不会立刻生效。</em></p>

<p>或者使用https的方式访问。</p>

<p>其他跨栏的姿势很多，不赘述。</p>

<p>参考：
<a href="http://www.live-in.org/archives/1818.html">openshift使用方法介绍</a></p>

<p><a href="http://www.live-in.org/archives/1818.html">openshift用ssh登陆后的目录结构</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sublime text 2 下的Markdown写作]]></title>
    <link href="http://grunmin.github.io/blog/2014/03/12/sublime-text-2-xia-de-markdownxie-zuo/"/>
    <updated>2014-03-12T22:48:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2014/03/12/sublime-text-2-xia-de-markdownxie-zuo</id>
    <content type="html"><![CDATA[<p>作为Windows/Mac/Linux下强大的文本编辑器，st提供了对Markdown语言的支持。通过设置可实现markdown预览和转换功能。而本文介绍的<code>Markdown Preview</code>支持Mathjax语法和目录自动生成。(Windows下）</p>

<!-- more -->


<h2>安装Package Control</h2>

<p>安装包控制扩展可以方便地为st添加拓展。
打开st，按下组合键<code>Control + \``，出现控制台，输入
```
import urllib2,os; pf='Package Control.sublime-package'; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), 'wb' ).write( urllib2.urlopen( 'http://sublime.wbond.net/' +pf.replace( ' ','%20' )).read()); print( 'Please restart Sublime Text to finish installation')
```
当看到代码最后一行提示的时候说明安装成功，此时重启st，可在</code>Preferences &ndash;> Package Settings<code>看到</code>Package Control`。</p>

<h2>安装markdown preview</h2>

<p>按下键<code>Ctrl+Shift+p</code>调出命令面板，找到<code>Package Control: install Pakage</code>这一项。搜索markdown preview，点击安装。</p>

<h2>使用</h2>

<p>Markdown Preview较常用的功能是<code>preview in browser</code>和<code>Export HTML in Sublime Text</code>，前者可以在浏览器看到预览效果，后者可将markdown保存为html文件。</p>

<p><code>preview in browser</code>据称是实时的，但是实践上还是需要在st保存，然后浏览器刷新才能看到新的效果，好在markdown写得多的话也不需要每敲一行看一次效果。</p>

<h2>快捷键</h2>

<p>st支持自定义快捷键，<code>markdown preview</code>默认没有快捷键，我们可以自己为<code>preview in browser</code>设置快捷键。方法是在<code>Preferences -&gt; Key Bindings User</code>打开的文件的中括号中添加以下代码(可在Key Bindings Default找到格式)：
<code>
 { "keys": ["alt+m"], "command": "markdown_preview", "args": { "target": "browser"} }
</code>
&ldquo;alt+m"可设置为自己喜欢的按键。</p>

<h2>设置语法高亮和mathjax支持</h2>

<p>在<code>Preferences -&gt;Package Settings-&gt;Markdown Preview-&gt;Setting Default</code>中的第31行和36行找到
```
/*</p>

<pre><code>   Enable or not mathjax support.
*/
"enable_mathjax": false,

/*
    Enable or not highlight.js support for syntax highlighting.
*/
"enable_highlight": false,
</code></pre>

<p><code>
将 两个false改为true即可。
语法高亮跟编辑器的主题有关，可以在`Preferences -&gt;Color Scheme`找自己喜欢的主题。
关于目录生成，只要文章是按照markdown语法写作的。在需要生成目录的地方写
</code>
[TOC]
```
即可。</p>

<blockquote><p>如果你这里没有看到目录而只是看到代码，说明简书不支持目录自动生成哈哈</p></blockquote>

<h2>打印成pdf</h2>

<p>将markdown转换为pdf应该有很多种方法的。我没有再折腾，直接用谷歌浏览器虚拟打印功能生成。
利用<code>Markdown Preview</code>的<code>Preview in Browser</code>功能可以在浏览器上看到htm效果。在页面<code>右键-&gt;打印-&gt;另存为pdf-&gt;调节页边距</code>即可将pdf文件下载下来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一年来使用工具的感想]]></title>
    <link href="http://grunmin.github.io/blog/2013/12/25/yi-nian-lai-shi-yong-gong-ju-de-gan-xiang/"/>
    <updated>2013-12-25T12:56:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2013/12/25/yi-nian-lai-shi-yong-gong-ju-de-gan-xiang</id>
    <content type="html"><![CDATA[<p> 只有当收集的资料转化为内在的知识和技能，成为成长进步的阶梯后，它才称得上是有益有用的。</p>

<!--more-->


<p>我自诩尝试过许多工具，以此来提高工作效率。但是今天，我在简书上看到的文章<a href="http://jianshu.io/p/d4b2XY">哪儿有那么多逼可装</a>。犹如当头一棒。我想我正是作者笔下的，为工具所束缚的装逼者。</p>

<p> 我对工具有很高的追求，直到现在都在执着地去寻找易用，高效的工具，并且最大程度的将其用于日常生活中。比如我尝试用过安卓手机上大多数的词典。从彩虹，深蓝，mdict到形形色色叫不出名字的app，我一个一个下载试用不厌其烦。在谷歌阅读器即将下架的时候，我搜索了许多替代品，从网页版到移动端，不停地导入和导出rss。我也花了很多时间寻找笔记软件，比如印象，有道，为知，了解它们的用法和特性，慎重地选择一到两个。我用谷歌表单做调查问卷，而不是大多数人用的问卷星。我用vim写php代码，而不是IDE。我用linux（事实上我只是个学生，不需要用到linux来工作），用markdown，用octopress，用irc。我听说这东西很好所以去用，我认为学会了以后一定会有大用。</p>

<p>事实上，我隔上几天才会用到词典，阅读器已经有几个月时间没有打开过，谷歌表单其实没有问卷星好用，用vim的效率提不上来，octopress几乎没有人上去过，irc频道里一直冷冷清清。只有为知笔记是一直在用着的。（linux版也即将支持markdown了）</p>

<p>我考虑过收支比，内心清楚这是亏本的买卖。但是我不以为然，或者说，不愿意去相信，又或者是装逼的内在需求使然。我一如既往地花费大量时间，乐此不疲。</p>

<p>过度追求工具的优化会让人忘记使用工具的初衷。在接触linux之后，我深刻认同效率，内容至上的观点。初学的盲目，让我陷入这一深沼之中。反思一下过去，希望今后有所改进，回到踏实勤勉的主线上来。</p>

<p>以此为记。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用stackedit保存笔记]]></title>
    <link href="http://grunmin.github.io/blog/2013/11/23/yong-stackeditbao-cun-bi-ji/"/>
    <updated>2013-11-23T16:49:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2013/11/23/yong-stackeditbao-cun-bi-ji</id>
    <content type="html"><![CDATA[<p>在<a href="http://grunmin.github.io/blog/2013/11/23/yong-ma-ke-fei-xiang-xie-bo-ke/">上一篇文章</a>里写到用马克飞象写博客，不知对用印象笔记的读者有没有帮助。我对工具有近乎狂热的追求，花了很多时间来尝试不同工具，试图找出其中最高效率的，最简约的，最人性化的。比如云盘，云相册，linux发行版，以及各种编辑器等。在写上一篇博客的时候其实也用到了其他的工具，我在此将其写下来。</p>

<!-- more -->


<p>马克飞象编辑器显然对markdown的支持没有专业工具那么好（还有上文提到的硬伤)，在发表一片博文之前，我都要将其拷贝到stackedit上查看格式是否有误，在stackedit上修改之后又拷贝到笔记里。过程繁琐，于是我寻思，是否有更加简单的方式来完成同样的工作。</p>

<p>其实stackedit提供了我需要的功能。它支持编辑器与谷歌云端硬盘和dropbox之间文件的同步。也就是说，在stackedit上编辑的文件可以保存到谷歌和dropbox的服务器中，这其实就是用markdown来写笔记。</p>

<p>点击stackedit页面左上角的图标<img src="https://lh3.googleusercontent.com/DeduTfgiszvG6lZ-SjC0XvCWAJELtr6026s9wQWR9g=s0" alt="enter image description here" />，在SYNCHRONIZE下有谷歌云端硬盘和dropbox的图标，点击<code>Export to Google Drive</code>就可以将文章保存到云端硬盘中，dropbox也是如此。</p>

<p>如此，我发表博文的过程相对简单了。直接在stackedit上编辑（支持离线编辑）好，保存到云端，然后把代码交给octopress处理即可。</p>

<p>用stackedit有另一个好处是可以直接插入谷歌相册里的图片，或者直接上传本地图片到相册上直接用。</p>

<p>到目前为止，我发现的唯一缺点是谷歌文档不能预览或编辑stackedit写好的笔记，需要通过stackedit来打开和编辑。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用马克飞象写博客]]></title>
    <link href="http://grunmin.github.io/blog/2013/11/23/yong-ma-ke-fei-xiang-xie-bo-ke/"/>
    <updated>2013-11-23T15:46:00+08:00</updated>
    <id>http://grunmin.github.io/blog/2013/11/23/yong-ma-ke-fei-xiang-xie-bo-ke</id>
    <content type="html"><![CDATA[<p>用octopress搭建博客之后，大爱markdown的简约，因此我对云笔记的要求又多了一项：支持markdown格式编辑和保存。</p>

<p>应该说每一种云笔记都有自己的特点。为知笔记在知识管理方面有独到之处，它的网页剪辑功能强大，支持无限制分级，且全平台支持，可作为PKM工具。印象笔记界面清爽，多种应用接入，逐步打造成完整的生态系统。而现在，为知笔记和印象笔记都支持markdown了，诸君可以试用看哪一种好。本文只谈技术，不贸然推荐。</p>

<p>在写octopress博客的时候，我先在为知笔记上写好纯文本格式的正文，将其复制到stackedit上用markdown语法进行处理，确认无误后写进octopress的文件中。这样的问题是，更新博文后笔记和博客的内容就不一样了。再说，笔记上纯文本格式的正文也十分难看。 （这是写在为知笔记还不支持markdown时候的情况，事实上自从它支持后就不用那么麻烦了。）</p>

<p>今天在chrome商店上看到了一个应用，据称是专为印象笔记打造的markdown编辑器，叫马克飞象。这是图标<br/>
<img src="https://lh5.googleusercontent.com/-hOEvL1TOB-o/UpBepDGUAhI/AAAAAAAAAGY/WHZ5qubwNeE/s0/2013-11-23-151125_118x133_scrot.png" title="2013-11-23-151125_118x133_scrot.png" alt="enter image description here" /></p>

<p>绑定笔记帐号后在上面编辑md格式文件可以实时查看效果，并将处理后的笔记保存到印象笔记中。这是编辑界面:</p>

<p><img src="https://lh6.googleusercontent.com/-aipDbqSYjS0/UpBe_0jaxzI/AAAAAAAAAGw/giigXjHPP2A/s0/2013-11-23-153132_937x329_scrot.png" title="2013-11-23-153132_937x329_scrot.png" alt="enter image description here" /></p>

<p>用马克飞象编辑的文章保存到笔记中是经markdown渲染的（笔记不会显示源代码），这样保存下来的笔记比纯文本格式或者markdown源代码格式的好看多了。</p>

<p>相对于stackedit与谷歌云端硬盘的优势也是十分明显的，它可以直接在印象笔记中查看。</p>

<p>马克飞象支持将所编辑的笔记分类和加标签，使用<code>@(categories)[tags|tags]</code>即可，同一文章中只能出现一次，且必须与其他内容隔一些距离。</p>

<p>如果要修改笔记内容怎么办？不用担心，用马克飞象编辑的笔记在右上角会显示一个链接（如下图），点击链接后会用启用马克飞象编辑文章，因此不用担心后续更新的问题。</p>

<p><img src="https://lh6.googleusercontent.com/-N6XlKlK81F8/UpBe4QtcpWI/AAAAAAAAAGk/GtCzYl-__PY/s0/2013-11-23-153122_422x354_scrot.png" title="2013-11-23-153122_422x354_scrot.png" alt="enter image description here" /></p>

<p>我用马克飞象写的这篇博文，感觉非常不错，不过有两点需要注意：</p>

<ul>
<li>图片显示<br/>
直接写<code>![][]</code>这样插入图片的语法能够生效，但是在编辑器上无法看到预览。要看到预览，请点击右上角<code>功能</code>里插入图片的选项。</li>
<li>兼容问题
由于md语言有多种扩展，将马克飞象已显示无问题的源码直接拷贝到octopress里可能并不能达到预想的效果。</li>
</ul>


<p>总体来说马克飞象还是十分实用的，特别是对程序员，用马克飞象记录代码如虎添翼。</p>
]]></content>
  </entry>
  
</feed>
